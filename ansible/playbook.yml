- name: Create infrastructure and deploy Node.js app with Docker Compose
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    ansible_python_interpreter: /usr/bin/python3
    aws_region: eu-central-1
    vpc_name: celebration-vpc
    network: 10.0.0.0/16
    subnet_cidr: 10.0.1.0/24
    subnet: eu-central-1a
    aws_ubuntu_ami: ami-06c374f393664f330
    Server_type: t3.micro
    keypair: ansible_new_key
    server_volume_size: 16
    server_name: celebration-server
    env: production

  tasks:

  - name: Create VPC
    amazon.aws.ec2_vpc_net:
      name: "{{ vpc_name }}"
      cidr_block: "{{ network }}"
      region: "{{ aws_region }}"
      state: present
      dns_hostnames: yes
      dns_support: yes
    register: vpc

  - name: Create subnet
    amazon.aws.ec2_vpc_subnet:
      state: present
      vpc_id: "{{ vpc.vpc.id }}"
      cidr: "{{ subnet_cidr }}"
      az: "{{ subnet }}"
      region: "{{ aws_region }}"
      map_public: yes
    register: subnet

  - name: Create Internet Gateway
    amazon.aws.ec2_vpc_igw:
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ aws_region }}"
      state: present
    register: igw

  - name: Create Route Table
    amazon.aws.ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ aws_region }}"
      state: present
      subnets:
        - "{{ subnet.subnet.id }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ igw.gateway_id }}"

  - name: Create security group
    amazon.aws.ec2_group:
      name: "{{ vpc_name }} SG"
      description: Security group for Node app
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ aws_region }}"
      state: present
      rules:
        - proto: tcp
          ports: [22, 80, 3001]
          cidr_ip: 0.0.0.0/0
    register: sg

  - name: Launch EC2 instance
    amazon.aws.ec2_instance:
      name: "{{ server_name }}"
      key_name: "{{ keypair }}"
      instance_type: "{{ Server_type }}"
      image_id: "{{ aws_ubuntu_ami }}"
      region: "{{ aws_region }}"
      vpc_subnet_id: "{{ subnet.subnet.id }}"
      security_group: "{{ sg.group_id }}"
      wait: yes
      count: 1
      network:
        assign_public_ip: yes
      tags:
        Name: "{{ server_name }}"
        Environment: "{{ env }}"
      volumes:
        - device_name: /dev/sda1
          ebs:
            volume_size: "{{ server_volume_size }}"
            volume_type: gp3
            delete_on_termination: true
    register: ec2

  - name: Wait 20 seconds for EC2 to initialize
    pause:
      seconds: 20

  - name: Get public IP of instance
    amazon.aws.ec2_instance_info:
      filters:
        "tag:Name": "{{ server_name }}"
        instance-state-name: ["running"]
      region: "{{ aws_region }}"
    register: ec2_data

  - name: Fail if no EC2 instances found
    fail:
      msg: "No running EC2 instances found with tag Name={{ server_name }}"
    when: ec2_data.instances | length == 0

  - name: Add EC2 instance to dynamic hosts
    add_host:
      name: "{{ ec2_data.instances[0].public_ip_address }}"
      groups: app
      ansible_user: ubuntu
      ansible_ssh_private_key_file: "{{ lookup('env','HOME') }}/.ssh/{{ keypair }}.pem"
      ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
    when: ec2_data.instances | length > 0

  - name: Wait for SSH to be ready
    wait_for:
      host: "{{ ec2_data.instances[0].public_ip_address }}"
      port: 22
      timeout: 300
    when: ec2_data.instances | length > 0

# -------------------------- STAGE 2: EC2 configuration --------------------------

- name: Setup server and deploy Node.js app
  hosts: app
  become: true
  vars:
    keypair: ansible_new_key
    ansible_user: ubuntu
    ansible_ssh_private_key_file: "{{ lookup('env','HOME') }}/.ssh/{{ keypair }}.pem"
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

  tasks:
    - name: Install Docker
      apt:
        name: docker.io
        state: present
        update_cache: yes

    - name: Install Docker Compose (v2)
      shell: |
        mkdir -p /usr/local/lib/docker/cli-plugins
        curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose
        chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
      args:
        creates: /usr/local/lib/docker/cli-plugins/docker-compose

    - name: Clone the app repo
      git:
        repo: 'https://github.com/Reutp111/celebration-devops.git'
        dest: /home/ubuntu/celebration-devops-main

    - name: Run docker-compose
      shell: docker compose up -d
      args:
        chdir: /home/ubuntu/celebration-devops-main

